// Generated by gencpp from file dcsc_fpga/MopsSensors.msg
// DO NOT EDIT!


#ifndef DCSC_FPGA_MESSAGE_MOPSSENSORS_H
#define DCSC_FPGA_MESSAGE_MOPSSENSORS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace dcsc_fpga
{
template <class ContainerAllocator>
struct MopsSensors_
{
  typedef MopsSensors_<ContainerAllocator> Type;

  MopsSensors_()
    : header()
    , position0(0.0)
    , position1(0.0)
    , speed(0.0)
    , voltage(0.0)
    , current(0.0)
    , external_voltage(0.0)
    , digital_inputs(0)  {
    }
  MopsSensors_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , position0(0.0)
    , position1(0.0)
    , speed(0.0)
    , voltage(0.0)
    , current(0.0)
    , external_voltage(0.0)
    , digital_inputs(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _position0_type;
  _position0_type position0;

   typedef double _position1_type;
  _position1_type position1;

   typedef double _speed_type;
  _speed_type speed;

   typedef double _voltage_type;
  _voltage_type voltage;

   typedef double _current_type;
  _current_type current;

   typedef double _external_voltage_type;
  _external_voltage_type external_voltage;

   typedef uint8_t _digital_inputs_type;
  _digital_inputs_type digital_inputs;





  typedef boost::shared_ptr< ::dcsc_fpga::MopsSensors_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dcsc_fpga::MopsSensors_<ContainerAllocator> const> ConstPtr;

}; // struct MopsSensors_

typedef ::dcsc_fpga::MopsSensors_<std::allocator<void> > MopsSensors;

typedef boost::shared_ptr< ::dcsc_fpga::MopsSensors > MopsSensorsPtr;
typedef boost::shared_ptr< ::dcsc_fpga::MopsSensors const> MopsSensorsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dcsc_fpga::MopsSensors_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dcsc_fpga::MopsSensors_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dcsc_fpga::MopsSensors_<ContainerAllocator1> & lhs, const ::dcsc_fpga::MopsSensors_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.position0 == rhs.position0 &&
    lhs.position1 == rhs.position1 &&
    lhs.speed == rhs.speed &&
    lhs.voltage == rhs.voltage &&
    lhs.current == rhs.current &&
    lhs.external_voltage == rhs.external_voltage &&
    lhs.digital_inputs == rhs.digital_inputs;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dcsc_fpga::MopsSensors_<ContainerAllocator1> & lhs, const ::dcsc_fpga::MopsSensors_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dcsc_fpga

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dcsc_fpga::MopsSensors_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dcsc_fpga::MopsSensors_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dcsc_fpga::MopsSensors_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dcsc_fpga::MopsSensors_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dcsc_fpga::MopsSensors_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dcsc_fpga::MopsSensors_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dcsc_fpga::MopsSensors_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e19aa551732aa149ac3b2640b0a2a295";
  }

  static const char* value(const ::dcsc_fpga::MopsSensors_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe19aa551732aa149ULL;
  static const uint64_t static_value2 = 0xac3b2640b0a2a295ULL;
};

template<class ContainerAllocator>
struct DataType< ::dcsc_fpga::MopsSensors_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dcsc_fpga/MopsSensors";
  }

  static const char* value(const ::dcsc_fpga::MopsSensors_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dcsc_fpga::MopsSensors_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"float64 position0\n"
"float64 position1\n"
"float64 speed\n"
"float64 voltage\n"
"float64 current\n"
"float64 external_voltage\n"
"uint8 digital_inputs\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::dcsc_fpga::MopsSensors_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dcsc_fpga::MopsSensors_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.position0);
      stream.next(m.position1);
      stream.next(m.speed);
      stream.next(m.voltage);
      stream.next(m.current);
      stream.next(m.external_voltage);
      stream.next(m.digital_inputs);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MopsSensors_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dcsc_fpga::MopsSensors_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dcsc_fpga::MopsSensors_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "position0: ";
    Printer<double>::stream(s, indent + "  ", v.position0);
    s << indent << "position1: ";
    Printer<double>::stream(s, indent + "  ", v.position1);
    s << indent << "speed: ";
    Printer<double>::stream(s, indent + "  ", v.speed);
    s << indent << "voltage: ";
    Printer<double>::stream(s, indent + "  ", v.voltage);
    s << indent << "current: ";
    Printer<double>::stream(s, indent + "  ", v.current);
    s << indent << "external_voltage: ";
    Printer<double>::stream(s, indent + "  ", v.external_voltage);
    s << indent << "digital_inputs: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.digital_inputs);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DCSC_FPGA_MESSAGE_MOPSSENSORS_H
