// Generated by gencpp from file dcsc_fpga/MopsWriteRequest.msg
// DO NOT EDIT!


#ifndef DCSC_FPGA_MESSAGE_MOPSWRITEREQUEST_H
#define DCSC_FPGA_MESSAGE_MOPSWRITEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <dcsc_fpga/MopsActuators.h>

namespace dcsc_fpga
{
template <class ContainerAllocator>
struct MopsWriteRequest_
{
  typedef MopsWriteRequest_<ContainerAllocator> Type;

  MopsWriteRequest_()
    : actuators()  {
    }
  MopsWriteRequest_(const ContainerAllocator& _alloc)
    : actuators(_alloc)  {
  (void)_alloc;
    }



   typedef  ::dcsc_fpga::MopsActuators_<ContainerAllocator>  _actuators_type;
  _actuators_type actuators;





  typedef boost::shared_ptr< ::dcsc_fpga::MopsWriteRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dcsc_fpga::MopsWriteRequest_<ContainerAllocator> const> ConstPtr;

}; // struct MopsWriteRequest_

typedef ::dcsc_fpga::MopsWriteRequest_<std::allocator<void> > MopsWriteRequest;

typedef boost::shared_ptr< ::dcsc_fpga::MopsWriteRequest > MopsWriteRequestPtr;
typedef boost::shared_ptr< ::dcsc_fpga::MopsWriteRequest const> MopsWriteRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dcsc_fpga::MopsWriteRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dcsc_fpga::MopsWriteRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dcsc_fpga::MopsWriteRequest_<ContainerAllocator1> & lhs, const ::dcsc_fpga::MopsWriteRequest_<ContainerAllocator2> & rhs)
{
  return lhs.actuators == rhs.actuators;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dcsc_fpga::MopsWriteRequest_<ContainerAllocator1> & lhs, const ::dcsc_fpga::MopsWriteRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dcsc_fpga

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dcsc_fpga::MopsWriteRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dcsc_fpga::MopsWriteRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dcsc_fpga::MopsWriteRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dcsc_fpga::MopsWriteRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dcsc_fpga::MopsWriteRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dcsc_fpga::MopsWriteRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dcsc_fpga::MopsWriteRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9cf6fa7d5fe2d1e423e960795833a766";
  }

  static const char* value(const ::dcsc_fpga::MopsWriteRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9cf6fa7d5fe2d1e4ULL;
  static const uint64_t static_value2 = 0x23e960795833a766ULL;
};

template<class ContainerAllocator>
struct DataType< ::dcsc_fpga::MopsWriteRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dcsc_fpga/MopsWriteRequest";
  }

  static const char* value(const ::dcsc_fpga::MopsWriteRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dcsc_fpga::MopsWriteRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dcsc_fpga/MopsActuators actuators\n"
"\n"
"================================================================================\n"
"MSG: dcsc_fpga/MopsActuators\n"
"uint8 digital_outputs\n"
"float64 voltage0\n"
"float64 voltage1\n"
"float64 timeout\n"
;
  }

  static const char* value(const ::dcsc_fpga::MopsWriteRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dcsc_fpga::MopsWriteRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.actuators);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MopsWriteRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dcsc_fpga::MopsWriteRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dcsc_fpga::MopsWriteRequest_<ContainerAllocator>& v)
  {
    s << indent << "actuators: ";
    s << std::endl;
    Printer< ::dcsc_fpga::MopsActuators_<ContainerAllocator> >::stream(s, indent + "  ", v.actuators);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DCSC_FPGA_MESSAGE_MOPSWRITEREQUEST_H
