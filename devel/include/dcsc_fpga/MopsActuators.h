// Generated by gencpp from file dcsc_fpga/MopsActuators.msg
// DO NOT EDIT!


#ifndef DCSC_FPGA_MESSAGE_MOPSACTUATORS_H
#define DCSC_FPGA_MESSAGE_MOPSACTUATORS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dcsc_fpga
{
template <class ContainerAllocator>
struct MopsActuators_
{
  typedef MopsActuators_<ContainerAllocator> Type;

  MopsActuators_()
    : digital_outputs(0)
    , voltage0(0.0)
    , voltage1(0.0)
    , timeout(0.0)  {
    }
  MopsActuators_(const ContainerAllocator& _alloc)
    : digital_outputs(0)
    , voltage0(0.0)
    , voltage1(0.0)
    , timeout(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _digital_outputs_type;
  _digital_outputs_type digital_outputs;

   typedef double _voltage0_type;
  _voltage0_type voltage0;

   typedef double _voltage1_type;
  _voltage1_type voltage1;

   typedef double _timeout_type;
  _timeout_type timeout;





  typedef boost::shared_ptr< ::dcsc_fpga::MopsActuators_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dcsc_fpga::MopsActuators_<ContainerAllocator> const> ConstPtr;

}; // struct MopsActuators_

typedef ::dcsc_fpga::MopsActuators_<std::allocator<void> > MopsActuators;

typedef boost::shared_ptr< ::dcsc_fpga::MopsActuators > MopsActuatorsPtr;
typedef boost::shared_ptr< ::dcsc_fpga::MopsActuators const> MopsActuatorsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dcsc_fpga::MopsActuators_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dcsc_fpga::MopsActuators_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dcsc_fpga::MopsActuators_<ContainerAllocator1> & lhs, const ::dcsc_fpga::MopsActuators_<ContainerAllocator2> & rhs)
{
  return lhs.digital_outputs == rhs.digital_outputs &&
    lhs.voltage0 == rhs.voltage0 &&
    lhs.voltage1 == rhs.voltage1 &&
    lhs.timeout == rhs.timeout;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dcsc_fpga::MopsActuators_<ContainerAllocator1> & lhs, const ::dcsc_fpga::MopsActuators_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dcsc_fpga

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dcsc_fpga::MopsActuators_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dcsc_fpga::MopsActuators_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dcsc_fpga::MopsActuators_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dcsc_fpga::MopsActuators_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dcsc_fpga::MopsActuators_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dcsc_fpga::MopsActuators_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dcsc_fpga::MopsActuators_<ContainerAllocator> >
{
  static const char* value()
  {
    return "546bc7f707f4532234a4955136c8eadc";
  }

  static const char* value(const ::dcsc_fpga::MopsActuators_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x546bc7f707f45322ULL;
  static const uint64_t static_value2 = 0x34a4955136c8eadcULL;
};

template<class ContainerAllocator>
struct DataType< ::dcsc_fpga::MopsActuators_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dcsc_fpga/MopsActuators";
  }

  static const char* value(const ::dcsc_fpga::MopsActuators_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dcsc_fpga::MopsActuators_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 digital_outputs\n"
"float64 voltage0\n"
"float64 voltage1\n"
"float64 timeout\n"
;
  }

  static const char* value(const ::dcsc_fpga::MopsActuators_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dcsc_fpga::MopsActuators_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.digital_outputs);
      stream.next(m.voltage0);
      stream.next(m.voltage1);
      stream.next(m.timeout);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MopsActuators_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dcsc_fpga::MopsActuators_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dcsc_fpga::MopsActuators_<ContainerAllocator>& v)
  {
    s << indent << "digital_outputs: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.digital_outputs);
    s << indent << "voltage0: ";
    Printer<double>::stream(s, indent + "  ", v.voltage0);
    s << indent << "voltage1: ";
    Printer<double>::stream(s, indent + "  ", v.voltage1);
    s << indent << "timeout: ";
    Printer<double>::stream(s, indent + "  ", v.timeout);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DCSC_FPGA_MESSAGE_MOPSACTUATORS_H
